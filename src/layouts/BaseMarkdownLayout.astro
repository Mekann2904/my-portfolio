---
import '../styles/global.pcss';
import { getImage } from 'astro:assets';
import outputGray from '../assets/output_gray.png';
/// <reference types="astro/client" />
import type { MarkdownHeading } from 'astro';
import ExtractLinks from '../components/ExtractLinks.jsx';
import DynamicToc from '../components/DynamicToc.jsx';

// --- Props処理 ---
// Markdownレイアウトとして使用する場合、Astroが自動的にheadingsをpropsに含めてくれる
const { headings } = Astro.props as { headings: MarkdownHeading[] };
const rawProps = (Astro.props as any).frontmatter ?? Astro.props;
const {
  title,
  description,
  author,
  tags,
  date,
  pubDate,
  ogImage,
  links, // 追加
} = rawProps as {
  title: string;
  description?: string;
  author?: string;
  tags?: string[];
  date?: string | Date;
  pubDate?: string;
  ogImage?: string;
  links?: { title: string; url: string }[]; // 追加
};

// linksがなければtagsから自動生成
const autoLinks = tags?.map(tag => [
  { title: `Zenn #${tag}`, url: `https://zenn.dev/topics/${tag}` },
  { title: `Qiita #${tag}`, url: `https://qiita.com/tags/${tag}` }
]).flat() ?? [];
const linksToShow = links && links.length > 0 ? links : autoLinks;

// --- OGP/URL関連 (変更なし) ---
const canonicalURL = Astro.url;
const siteName = 'Mekann';
const imagePath = ogImage || '/default-og-image.png';
const absoluteImageUrl = new URL(imagePath, Astro.url.origin).href;

// --- 日付処理 (変更なし) ---
let sourceDate: string | Date | undefined = date ?? pubDate;
let parsedDate: Date | null = null;
let isoDate = '';
if (typeof sourceDate === 'string') {
  try {
    parsedDate = new Date(sourceDate);
    if (isNaN(parsedDate.valueOf())) {
      parsedDate = null;
    } else {
      isoDate = parsedDate.toISOString();
    }
  } catch (e) {
    parsedDate = null;
  }
} else if (sourceDate instanceof Date) {
  if (!isNaN(sourceDate.valueOf())) {
    parsedDate = sourceDate;
    isoDate = parsedDate.toISOString();
  } else {
    parsedDate = null;
  }
}
const validDate = parsedDate instanceof Date;
const displayDate = validDate
  ? parsedDate!.toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
    })
  : '';

// 余白調整用の変数は不要になるため削除
const optimizedBg = await getImage({ src: outputGray, format: 'webp', quality: 80 });
---

<html lang="ja" class="bg-black">
  <head>
    {/* Head内は変更なし */}
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <base href="/" />
    {description && <meta name="description" content={description} />}
    <meta property="og:title" content={title} />
    {description && <meta property="og:description" content={description} />}
    <meta property="og:url" content={canonicalURL.href} />
    <meta property="og:site_name" content={siteName} />
    <meta property="og:image" content={absoluteImageUrl} />
    <meta property="og:type" content="article" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@Mekann2904" />
    <meta name="twitter:creator" content="@Mekann2904" />
    <meta name="twitter:title" content={title} />
    {description && <meta name="twitter:description" content={description} />}
    <meta name="twitter:image" content={absoluteImageUrl} />
    <link rel="preload" as="image" href={optimizedBg.src} />
  </head>

  <body class="bg-black text-white text-base bg-faint-image"
    style={`--faint-bg: url('${optimizedBg.src}');`}
  >
    {/* --- Header (変更なし) --- */}
    <header class="fixed inset-x-0 top-0 z-50 bg-black border-b border-white/10 w-full">
      <nav class="flex items-center justify-between px-8 py-5">
        <a href="/" class="text-white font-semibold text-lg">Mekann</a>
        <ul class="flex gap-8 text-sm">
          <li><a href="/" class="text-gray-500 hover:text-white transition">Home</a></li>
          <li class="relative group">
            <button class="text-gray-500 hover:text-white transition flex items-center gap-1">
              Art
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            <ul class="absolute right-0 mt-2 min-w-[12rem] max-w-[90vw] bg-black border border-white/10 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 overflow-x-auto">
              <li><a href="/test/three" class="block px-4 py-2 text-sm text-gray-500 hover:text-white hover:bg-white/5">Knowledge Network 3D</a></li>
              <li><a href="/test/three-1" class="block px-4 py-2 text-sm text-gray-500 hover:text-white hover:bg-white/5">Three.js Light Examples</a></li>
              <li><a href="/test/three-2" class="block px-4 py-2 text-sm text-gray-500 hover:text-white hover:bg-white/5">Water Animation</a></li>
              <li><a href="/test/three-3" class="block px-4 py-2 text-sm text-gray-500 hover:text-white hover:bg-white/5">Three.js 3D Model Demo</a></li>
              <li><a href="/test/three-4" class="block px-4 py-2 text-sm text-gray-500 hover:text-white hover:bg-white/5">Three.js Projector Demo</a></li>
            </ul>
          </li>
          <li><a href="/blog" class="text-gray-500 hover:text-white transition">Blog</a></li>
        </ul>
      </nav>
    </header>

    {/* --- Main Content (3カラムレイアウトに変更) --- */}
    <main class="w-full px-4 sm:px-6 lg:px-8 pt-28 pb-12">
      <div class="grid grid-cols-1 lg:grid-cols-12 lg:gap-x-8">
        
        {headings && headings.length > 1 && (
          <aside class="hidden lg:block lg:col-span-3">
            <div class="sticky top-28">
              <a href="/blog/" class="inline-flex items-center text-gray-500 hover:text-white mb-6 lg:mb-8 no-underline text-base">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                Back to Blog
              </a>
              <h2 class="text-sm font-bold tracking-wider uppercase text-gray-500 mb-4">On this page</h2>
              <DynamicToc headings={headings} pathname={Astro.url.pathname} client:load />
            </div>
          </aside>
        )}

        <div class="lg:col-span-6 px-0">
          <article
            class="prose prose-sm prose-invert mx-auto max-w-4xl
                   leading-snug font-jp-sans
                   bg-black/0
                   prose-pre:bg-slate-800 prose-pre:text-gray-100 prose-pre:p-4 
                   prose-pre:rounded-lg prose-pre:overflow-auto prose-pre:my-6
                   prose-code:bg-transparent prose-code:text-inherit"
          >
            {validDate && (
              <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between text-sm text-gray-500 mb-6 lg:mb-8">
                <time datetime={isoDate}>{displayDate}</time>
                {author && <span class="mt-1 sm:mt-0 sm:ml-4">By {author}</span>}
              </div>
            )}

            <h1 class="text-2xl font-bold text-white mb-8 lg:mb-10">{title}</h1>
            
            {/* 本文のコンテンツがここに表示される */}
            <slot />
          </article>
        </div>
        
        {tags && tags.length > 0 && (
          <aside class="lg:col-span-3 mt-16 lg:mt-0">
            <div class="sticky top-28">
              <h2 class="text-sm font-bold tracking-wider uppercase text-gray-500 mb-4">Tags</h2>
              <div class="flex flex-wrap gap-3 mb-8">
                {tags.map((tag) => (
                  <a
                    href={`/tags/${tag}`}
                    class="bg-gray-800 text-blue-300 hover:bg-gray-700 hover:text-blue-200 px-3 py-1 rounded-full text-sm no-underline transition-colors"
                  >
                    #{tag}
                  </a>
                ))}
              </div>
              <ExtractLinks client:load />
            </div>
          </aside>
        )}

      </div>
    </main>

    {/* --- Footer (変更なし) --- */}
    <footer class="bg-black text-gray-400 border-t border-gray-800 py-6 lg:py-8 text-base">
      <div class="container mx-auto text-center text-sm px-6 lg:px-8">
        © {new Date().getFullYear()} {siteName}
      </div>
    </footer>
  </body>
</html>