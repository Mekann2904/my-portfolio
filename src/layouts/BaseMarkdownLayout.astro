---
import '../styles/global.pcss';
/// <reference types="astro/client" />

// --- Frontmatter処理 ---
const rawProps = (Astro.props as any).frontmatter ?? Astro.props;
const {
  title,
  description,
  author,
  tags,
  date,
  pubDate,
  // OGP用の画像パスをfrontmatterから受け取る
  ogImage,
} = rawProps as {
  title: string;
  description?: string;
  author?: string;
  tags?: string[];
  date?: string | Date;
  pubDate?: string;
  ogImage?: string; // 例: '/images/blog/my-post-image.png'
};

// --- OGP/URL関連の変数を定義 ---
// サイトのURL。Astro.urlから自動で取得
const canonicalURL = Astro.url;
// サイト名（og:site_name用）
const siteName = 'Mekann';
// OGP画像のURLを生成
// 記事のfrontmatterでogImageが指定されていればそれを使用し、
// なければデフォルトの画像パスを使う
const imagePath = ogImage || '/public/default-og-image.png';
// 相対パスを絶対URLに変換
const absoluteImageUrl = new URL(imagePath, Astro.url.origin).href;


// --- 日付処理 (変更なし) ---
let sourceDate: string | Date | undefined = date ?? pubDate;
let parsedDate: Date | null = null;
let isoDate = '';
if (typeof sourceDate === 'string') {
  try {
    parsedDate = new Date(sourceDate);
    if (isNaN(parsedDate.valueOf())) {
      parsedDate = null;
      console.warn(`Invalid date string provided: ${sourceDate}`);
    } else {
      isoDate = parsedDate.toISOString();
    }
  } catch (e) {
    console.error(`Error parsing date string: ${sourceDate}`, e);
    parsedDate = null;
  }
} else if (sourceDate instanceof Date) {
  if (!isNaN(sourceDate.valueOf())) {
    parsedDate = sourceDate;
    isoDate = parsedDate.toISOString();
  } else {
    console.warn(`Invalid Date object provided.`);
    parsedDate = null;
  }
}
const validDate = parsedDate instanceof Date;
const displayDate = validDate
  ? parsedDate!.toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
    })
  : '';
---

<html lang="ja" class="bg-black">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <base href="/" />
    {description && <meta name="description" content={description} />}

    {/* --- OGP / Twitter Card Meta Tags --- */}
    <meta property="og:title" content={title} />
    {description && <meta property="og:description" content={description} />}
    <meta property="og:url" content={canonicalURL.href} />
    <meta property="og:site_name" content={siteName} />
    <meta property="og:image" content={absoluteImageUrl} />
    <meta property="og:type" content="article" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    {description && <meta name="twitter:description" content={description} />}
    <meta name="twitter:image" content={absoluteImageUrl} />
    {/* ------------------------------------ */}

  </head>

  <body class="bg-black text-white text-base">
    {/* --- Header, Main, Article, Footer (変更なし) --- */}
    <header class="fixed inset-x-0 top-0 z-50 bg-black border-b border-gray-800 shadow-lg text-base">
      <nav class="container mx-auto flex items-center justify-between py-4 px-6 lg:px-8">
        <a href="/" class="text-white font-semibold text-base hover:text-blue-300 transition-colors">{siteName}</a>
        <ul class="flex gap-6 text-sm">
          <li><a href="/" class="text-gray-400 hover:text-white no-underline">Home</a></li>
          <li><a href="/blog" class="text-gray-400 hover:text-white no-underline">Blog</a></li>
        </ul>
      </nav>
    </header>

    <main class="pt-20 container mx-auto px-6 lg:px-8 py-8 lg:py-12 text-base">
      <article
        class="prose prose-base prose-invert mx-auto max-w-2xl py-8 relative
               prose-pre:bg-[rgb(40_40_40)]
               prose-pre:text-gray-100
               prose-pre:p-4
               prose-pre:rounded-lg
               prose-pre:overflow-auto
               prose-pre:my-6
               prose-code:bg-transparent
               prose-code:text-inherit"
      >
        <a href="/blog/" class="inline-flex items-center text-gray-500 hover:text-white mb-6 lg:mb-8 no-underline text-base">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          Back to Blog
        </a>

        {validDate && (
          <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between text-sm text-gray-500 mb-6 lg:mb-8">
            <time datetime={isoDate}>{displayDate}</time>
            {author && <span class="mt-1 sm:mt-0 sm:ml-4">By {author}</span>}
          </div>
        )}

        <h1 class="text-2xl font-bold text-white mb-8 lg:mb-10">{title}</h1>
        <slot />

        {tags && tags.length > 0 && (
          <div class="mt-16 border-t border-gray-700 pt-8 flex flex-wrap gap-3">
            {tags.map((tag) => (
              <a
                href={`/tags/${tag}`}
                class="bg-gray-800 text-blue-300 hover:bg-gray-700 hover:text-blue-200 px-3 py-1 rounded-full text-sm no-underline transition-colors"
              >
                #{tag}
              </a>
            ))}
          </div>
        )}
      </article>
    </main>

    <footer class="bg-black text-gray-400 border-t border-gray-800 py-6 lg:py-8 text-base">
      <div class="container mx-auto text-center text-sm px-6 lg:px-8">
        © {new Date().getFullYear()} {siteName}
      </div>
    </footer>
  </body>
</html>