---
import '../styles/global.pcss'; // 横スクロール対応などのグローバルCSSはこちらに記述想定
/// <reference types="astro/client" />

// Markdown frontmatter or direct props
const rawProps = (Astro.props as any).frontmatter ?? Astro.props;
const { title, description, author, tags, date, pubDate } = rawProps as {
  title: string;
  description?: string;
  author?: string;
  tags?: string[];
  date?: string | Date;
  pubDate?: string;
};

// Determine published date
let sourceDate: string | Date | undefined = date ?? pubDate;
let parsedDate: Date | null = null;
let isoDate = '';
if (typeof sourceDate === 'string') {
  try {
    parsedDate = new Date(sourceDate);
    // 有効な日付かチェック
    if (isNaN(parsedDate.valueOf())) {
      parsedDate = null;
      console.warn(`Invalid date string provided: ${sourceDate}`);
    } else {
      isoDate = parsedDate.toISOString(); // 有効な場合のみISO文字列を生成
    }
  } catch (e) {
    console.error(`Error parsing date string: ${sourceDate}`, e);
    parsedDate = null;
  }

} else if (sourceDate instanceof Date) {
  // 有効な日付かチェック
  if (!isNaN(sourceDate.valueOf())) {
    parsedDate = sourceDate;
    isoDate = parsedDate.toISOString();
  } else {
    console.warn(`Invalid Date object provided.`);
    parsedDate = null;
  }
}
const validDate = parsedDate instanceof Date; // isNaNチェック済みなのでこれでOK
const displayDate = validDate
  ? parsedDate!.toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
    })
  : '';
---

<html lang="ja" class="bg-black">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <base href="/" />
    {description && <meta name="description" content={description} />}

    {/* --- Performance: Preconnect to CDNs --- */}
    <link rel="preconnect" href="https://cdn.jsdelivr.net" />

    {/* --- KaTeX CSS (遅延読み込み) --- */}
    <link
      rel="preload"
      href="https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/katex.min.css"
      as="style"
      onload="this.onload=null;this.rel='stylesheet'"
    />
    <noscript>
      <link
        rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/katex.min.css"
      />
    </noscript>

    {/* --- Mermaid CSS (遅延読み込み) --- */}
    <link
      rel="preload"
      href="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.css"
      as="style"
      onload="this.onload=null;this.rel='stylesheet'"
    />
    <noscript>
      <link
        rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.css"
      />
    </noscript>

    {/* --- Performance: Font Display for KaTeX Fonts --- */}
    <style is:inline>
      @font-face {font-family: 'KaTeX_AMS'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_AMS-Regular.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_AMS-Regular.woff) format('woff'); font-weight: normal; font-style: normal; font-display: swap;}
      @font-face {font-family: 'KaTeX_Caligraphic'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Caligraphic-Bold.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Caligraphic-Bold.woff) format('woff'); font-weight: bold; font-style: normal; font-display: swap;}
      @font-face {font-family: 'KaTeX_Caligraphic'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Caligraphic-Regular.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Caligraphic-Regular.woff) format('woff'); font-weight: normal; font-style: normal; font-display: swap;}
      @font-face {font-family: 'KaTeX_Fraktur'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Fraktur-Bold.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Fraktur-Bold.woff) format('woff'); font-weight: bold; font-style: normal; font-display: swap;}
      @font-face {font-family: 'KaTeX_Fraktur'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Fraktur-Regular.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Fraktur-Regular.woff) format('woff'); font-weight: normal; font-style: normal; font-display: swap;}
      @font-face {font-family: 'KaTeX_Main'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Main-Bold.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Main-Bold.woff) format('woff'); font-weight: bold; font-style: normal; font-display: swap;}
      @font-face {font-family: 'KaTeX_Main'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Main-BoldItalic.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Main-BoldItalic.woff) format('woff'); font-weight: bold; font-style: italic; font-display: swap;}
      @font-face {font-family: 'KaTeX_Main'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Main-Italic.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Main-Italic.woff) format('woff'); font-weight: normal; font-style: italic; font-display: swap;}
      @font-face {font-family: 'KaTeX_Main'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Main-Regular.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Main-Regular.woff) format('woff'); font-weight: normal; font-style: normal; font-display: swap;}
      @font-face {font-family: 'KaTeX_Math'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Math-BoldItalic.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Math-BoldItalic.woff) format('woff'); font-weight: bold; font-style: italic; font-display: swap;}
      @font-face {font-family: 'KaTeX_Math'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Math-Italic.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Math-Italic.woff) format('woff'); font-weight: normal; font-style: italic; font-display: swap;}
      @font-face {font-family: 'KaTeX_SansSerif'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_SansSerif-Bold.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_SansSerif-Bold.woff) format('woff'); font-weight: bold; font-style: normal; font-display: swap;}
      @font-face {font-family: 'KaTeX_SansSerif'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_SansSerif-Italic.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_SansSerif-Italic.woff) format('woff'); font-weight: normal; font-style: italic; font-display: swap;}
      @font-face {font-family: 'KaTeX_SansSerif'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_SansSerif-Regular.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_SansSerif-Regular.woff) format('woff'); font-weight: normal; font-style: normal; font-display: swap;}
      @font-face {font-family: 'KaTeX_Script'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Script-Regular.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Script-Regular.woff) format('woff'); font-weight: normal; font-style: normal; font-display: swap;}
      @font-face {font-family: 'KaTeX_Size1'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Size1-Regular.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Size1-Regular.woff) format('woff'); font-weight: normal; font-style: normal; font-display: swap;}
      @font-face {font-family: 'KaTeX_Size2'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Size2-Regular.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Size2-Regular.woff) format('woff'); font-weight: normal; font-style: normal; font-display: swap;}
      @font-face {font-family: 'KaTeX_Size3'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Size3-Regular.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Size3-Regular.woff) format('woff'); font-weight: normal; font-style: normal; font-display: swap;}
      @font-face {font-family: 'KaTeX_Size4'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Size4-Regular.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Size4-Regular.woff) format('woff'); font-weight: normal; font-style: normal; font-display: swap;}
      @font-face {font-family: 'KaTeX_Typewriter'; src: url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Typewriter-Regular.woff2) format('woff2'), url(https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/fonts/KaTeX_Typewriter-Regular.woff) format('woff'); font-weight: normal; font-style: normal; font-display: swap;}
    </style>

    {/* --- Other Styles (Mermaid/Code Block Placeholders, Errors, KaTeX Scroll) --- */}
    <style>
      /* Mermaid SVG コンテナ: レンダリング前のプレースホルダーとエラー表示 */
      pre.mermaid[data-mermaid-processed="pending"] {
        min-height: 150px; display: flex; align-items: center; justify-content: center;
        background-color: rgba(255, 255, 255, 0.03); border-radius: 8px;
        border: 1px dashed rgba(255, 255, 255, 0.2); color: rgba(255, 255, 255, 0.5);
        font-style: italic; text-align: center; padding: 1em; margin: 1.5em 0;
        overflow: hidden;
      }
      pre.mermaid[data-mermaid-processed="pending"]::before { content: 'Loading diagram...'; }

      .mermaid-container {
        display: flex; justify-content: center; overflow-x: auto;
        margin: 1.5em 0; max-width: 100%;
        scrollbar-width: thin;
        scrollbar-color: rgba(255, 255, 255, 0.4) rgba(0, 0, 0, 0.2);
        -webkit-overflow-scrolling: touch;
      }
      .mermaid-container::-webkit-scrollbar { height: 8px; }
      .mermaid-container::-webkit-scrollbar-track { background: rgba(0, 0, 0, 0.2); border-radius: 4px; }
      .mermaid-container::-webkit-scrollbar-thumb { background-color: rgba(255, 255, 255, 0.4); border-radius: 4px; }

      .mermaid-container svg { max-width: none; display: block; }

      .mermaid-error-container {
        background-color: #400; color: #fcc; border: 1px solid #c00;
        padding: 1em; margin: 1.5em 0; border-radius: 8px;
        white-space: pre-wrap; word-break: break-all; font-family: monospace;
        overflow-x: auto;
      }

      /* --- 数式 (KaTeX) の横スクロール対応 --- */
      .katex-display {
        display: block;       /* ブロック要素として扱う */
        overflow-x: auto;     /* 横方向にコンテンツがはみ出た場合にスクロールバーを表示 */
        overflow-y: hidden;   /* 縦方向のスクロールは通常不要 */
        max-width: 100%;      /* 親要素の幅を超えないように */
        padding: 0.5em 0.2em; /* スクロールバーとの間に少し余白 */
        white-space: nowrap;  /* 数式内での自動改行を防ぐ */
        text-align: left;     /* スクロールを考慮し、左揃えにする (中央揃えが良い場合は center) */
        -webkit-overflow-scrolling: touch; /* iOSでの慣性スクロール */
        scrollbar-width: thin; /* Firefoxでのスクロールバーを細くする */
        scrollbar-color: rgba(255, 255, 255, 0.4) rgba(0, 0, 0, 0.2); /* スクロールバーの色 (つまみ トラック) */
      }
      /* Webkit系ブラウザ (Chrome, Safari, Edgeなど) のスクロールバー */
      .katex-display::-webkit-scrollbar {
        height: 6px; /* スクロールバーの高さ */
      }
      .katex-display::-webkit-scrollbar-track {
        background: rgba(0, 0, 0, 0.2); /* スクロールバーのトラック背景 */
        border-radius: 3px;
      }
      .katex-display::-webkit-scrollbar-thumb {
        background-color: rgba(255, 255, 255, 0.4); /* スクロールバーのつまみ部分 */
        border-radius: 3px;
      }
      /* KaTeX内部要素の調整 (通常は上記 .katex-display だけで十分) */
      .katex-display > .katex {
          display: inline-block; /* 横スクロールコンテナ内で正しく配置されるように */
          /* text-align: center; */ /* 中央揃えが必要な場合にコメント解除 */
      }

      /* コードブロックのコピーボタン用に pre に relative を付与 */
      .prose pre:not(.mermaid) { position: relative; }
    </style>
  </head>

  <body class="bg-black text-white">
    <header class="fixed inset-x-0 top-0 z-50 bg-black border-b border-gray-800 shadow-lg">
      <nav class="container mx-auto flex items-center justify-between py-4 px-6 lg:px-8">
        <a href="/" class="text-white font-semibold text-lg hover:text-blue-300 transition-colors">Mekann</a>
        <ul class="flex gap-6 text-sm">
          <li><a href="/" class="text-gray-400 hover:text-white no-underline">Home</a></li>
          <li><a href="/blog" class="text-gray-400 hover:text-white no-underline">Blog</a></li>
        </ul>
      </nav>
    </header>

    <main class="pt-20 container mx-auto px-6 lg:px-8 py-8 lg:py-12">
      <article
        class="prose prose-invert mx-auto max-w-3xl lg:max-w-4xl lg:prose-lg py-8 relative
               prose-pre:bg-[rgb(40_40_40)]
               prose-pre:text-gray-100
               prose-pre:p-4
               prose-pre:rounded-lg
               prose-pre:overflow-auto
               prose-pre:my-6
               prose-code:bg-transparent
               prose-code:text-inherit"
      >
        {/* 戻るリンク */}
        <a href="/blog/" class="inline-flex items-center text-gray-500 hover:text-white mb-6 lg:mb-8 no-underline">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
          </svg>
          Back to Blog
        </a>

        {/* 日付と著者 */}
        {validDate && (
          <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between text-sm text-gray-500 mb-6 lg:mb-8">
            <time datetime={isoDate}>{displayDate}</time>
            {author && <span class="mt-1 sm:mt-0 sm:ml-4">By {author}</span>}
          </div>
        )}

        {/* タイトル */}
        <h1 class="text-4xl lg:text-5xl font-bold text-white mb-8 lg:mb-10">{title}</h1>
        {/* ディスクリプション */}
        {description && <p class="text-gray-300 mb-10 lg:mb-12">{description}</p>}

        {/* --- Markdown/MDX コンテンツ --- */}
        <slot />
        {/* --- コンテンツ終了 --- */}

        {/* タグ */}
        {tags && tags.length > 0 && (
          <div class="mt-16 border-t border-gray-700 pt-8 flex flex-wrap gap-3">
            {tags.map((tag) => (
              <a
                href={`/tags/${tag}`}
                class="bg-gray-800 text-blue-300 hover:bg-gray-700 hover:text-blue-200 px-3 py-1 rounded-full text-sm no-underline transition-colors"
                // ここにあった無効な属性（コメント）を完全に削除しました
              >
                #{tag}
              </a>
            ))}
          </div>
        )}
      </article>
    </main>

    <footer class="bg-black text-gray-400 border-t border-gray-800 py-6 lg:py-8">
      <div class="container mx-auto text-center text-sm px-6 lg:px-8">
        © {new Date().getFullYear()} Mekann
      </div>
    </footer>

    {/* クライアントサイドスクリプト */}
    <script type="module">
      let mermaidInstance = null;
      let intersectionObserver = null;
      const mermaidElementsToProcess = new Set();

      // Mermaid ライブラリのロードと初期化
      async function ensureMermaid() {
        if (mermaidInstance) return mermaidInstance;
        if (!window.mermaidLoadingPromise) {
            window.mermaidLoadingPromise = (async () => {
                console.log('Loading Mermaid...');
                try {
                    // パスはCDN or セルフホストに合わせてください
                    const module = await import('https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.js');
                    const mermaidAPI = module.default;
                    mermaidAPI.initialize({ startOnLoad: false, theme: 'dark' });
                    console.log('Mermaid loaded and initialized.');
                    return mermaidAPI;
                } catch (error) {
                    console.error('Failed to load or initialize Mermaid:', error);
                    window.mermaidLoadingPromise = null;
                    return null;
                }
            })();
        }
        mermaidInstance = await window.mermaidLoadingPromise;
        return mermaidInstance;
      }

      // 個々の Mermaid ダイアグラムをレンダリング
      async function renderSingleMermaidDiagram(preElement) {
        if (!preElement || preElement.dataset.mermaidProcessed !== 'pending') return;
        preElement.dataset.mermaidProcessed = 'processing';
        const codeElement = preElement.querySelector('code');
        const code = codeElement?.textContent?.trim() || '';

        if (!code) {
          console.warn('Mermaid code block is empty.', preElement);
          preElement.dataset.mermaidProcessed = 'error';
          preElement.textContent = 'Error: Empty code block.';
          preElement.classList.add('mermaid-error-container');
          preElement.classList.remove('mermaid');
          return;
        }

        const mermaidAPI = await ensureMermaid();
        if (!mermaidAPI) {
          console.error('Mermaid instance is not available.');
          preElement.dataset.mermaidProcessed = 'error';
          const errorMessage = 'Error: Mermaid library failed to load.';
          if (preElement.classList.contains('mermaid')) {
             preElement.textContent = errorMessage;
             preElement.classList.add('mermaid-error-container');
             preElement.classList.remove('mermaid');
          } else {
             const errorDiv = document.createElement('div');
             errorDiv.classList.add('mermaid-error-container');
             errorDiv.textContent = errorMessage;
             preElement.parentNode?.replaceChild(errorDiv, preElement);
          }
          return;
        }

        const id = 'mermaid-' + Math.random().toString(36).substring(2, 9);

        try {
          const { svg } = await mermaidAPI.render(id, code);
          const div = document.createElement('div');
          div.innerHTML = svg;
          div.classList.add('mermaid-container');
          div.dataset.mermaidProcessed = 'done';
          if (preElement.parentNode) {
             preElement.parentNode.replaceChild(div, preElement);
          } else {
              console.warn("Parent node not found for preElement during replacement:", preElement);
              preElement.dataset.mermaidProcessed = 'error';
          }
        } catch (error) {
          console.error(`Error rendering Mermaid diagram ${id}:`, error, '\nSource Code:\n', code);
          const errorDiv = document.createElement('div');
          errorDiv.classList.add('mermaid-error-container');
          errorDiv.textContent = `Mermaid Render Error:\n${error?.message || String(error)}\n\nSource Code:\n${code}`;
          errorDiv.dataset.mermaidProcessed = 'error';
          if (preElement.parentNode) {
             preElement.parentNode.replaceChild(errorDiv, preElement);
          } else {
             console.warn("Parent node not found for preElement during error replacement:", preElement);
          }
        } finally {
             mermaidElementsToProcess.delete(preElement);
        }
      }

      // Intersection Observer のセットアップと実行
      function setupMermaidObserver() {
        if (intersectionObserver) {
          intersectionObserver.disconnect();
        }
        mermaidElementsToProcess.clear();
        const mermaidPres = document.querySelectorAll('pre.mermaid:not([data-mermaid-processed])');
        if (mermaidPres.length === 0) return;

        mermaidPres.forEach(pre => {
            pre.dataset.mermaidProcessed = 'pending';
            mermaidElementsToProcess.add(pre);
        });

        const observerOptions = {
          root: null,
          rootMargin: '200px 0px 200px 0px',
          threshold: 0.01
        };

        intersectionObserver = new IntersectionObserver(async (entries, observer) => {
          for (const entry of entries) {
            if (entry.isIntersecting) {
              /** @type {HTMLElement} */
              const targetPre = entry.target;
              observer.unobserve(targetPre);
              mermaidElementsToProcess.delete(targetPre);
              renderSingleMermaidDiagram(targetPre).catch(err => {
                  console.error("Error during async mermaid rendering trigger:", err, targetPre);
                  if (targetPre?.dataset && !targetPre.dataset.mermaidProcessed) {
                     targetPre.dataset.mermaidProcessed = 'error';
                  }
              });
            }
          }
        }, observerOptions);

        mermaidElementsToProcess.forEach(pre => {
          intersectionObserver.observe(pre);
        });
      }

      // コードブロックにコピーボタンを追加
      function addCopyButtons() {
        document.querySelectorAll('article.prose pre:not(.mermaid):not([data-copy-button-added])').forEach((pre) => {
          const codeEl = pre.querySelector('code');
          if (!codeEl) return;

          const btn = document.createElement('button');
          btn.textContent = 'Copy';
          btn.className =
            'copy-button absolute top-2.5 right-2.5 bg-gray-700 text-gray-200 text-xs px-3 py-1.5 rounded-md hover:bg-gray-600 opacity-0 group-hover:opacity-100 transition-all duration-200 focus:opacity-100 z-10';

          btn.addEventListener('click', async () => {
            const textToCopy = codeEl.textContent || '';
            if (!navigator.clipboard) {
                console.warn("Clipboard API not available.");
                btn.textContent = 'Error';
                setTimeout(() => (btn.textContent = 'Copy'), 1500);
                return;
            }
            try {
              await navigator.clipboard.writeText(textToCopy);
              btn.textContent = 'Copied!';
            } catch (err) {
              console.error('Failed to copy text: ', err);
              btn.textContent = 'Error';
            } finally {
               setTimeout(() => (btn.textContent = 'Copy'), 1500);
            }
          });

          pre.classList.add('group');
          if (window.getComputedStyle(pre).position === 'static') {
             pre.style.position = 'relative';
          }
          pre.appendChild(btn);
          pre.dataset.copyButtonAdded = 'true';
        });
      }

      // 機能の初期化/再初期化
      function initializePageFeatures() {
         console.log('Initializing page features (Mermaid Observer, Copy Buttons)...');
         setupMermaidObserver();
         addCopyButtons();
      }

      // --- イベントリスナー ---
      document.addEventListener('astro:page-load', initializePageFeatures);
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializePageFeatures);
      } else {
        initializePageFeatures();
      }

    </script>
  </body>
</html>