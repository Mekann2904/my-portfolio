---
import '../styles/global.pcss';
import { getImage } from 'astro:assets';
import outputGray from '../assets/output_gray.png';
/// <reference types="astro/client" />
import type { MarkdownHeading } from 'astro';
import ExtractLinks from '../components/ExtractLinks.jsx';
import DynamicToc from '../components/DynamicToc.jsx';
import { GoogleFontsOptimizer } from "astro-google-fonts-optimizer";
import Backlinks from '../components/Backlinks.jsx';
import BlogGraph from '../components/BlogGraph.jsx';
import fs from 'fs';
import path from 'path';

// --- 型定義 ---
interface BlogPost {
  slug: string;
  title: string;
  content: string;
}

// --- Props処理 ---
// Markdownレイアウトとして使用する場合、Astroが自動的にheadingsをpropsに含めてくれる
const { headings } = Astro.props as { headings: MarkdownHeading[] };
const rawProps = (Astro.props as any).frontmatter ?? Astro.props;
const {
  title,
  description,
  author,
  tags,
  date,
  pubDate,
  ogImage,
  links,
} = rawProps as {
  title: string;
  description?: string;
  author?: string;
  tags?: string[];
  date?: string | Date;
  pubDate?: string;
  ogImage?: string;
  links?: { title: string; url: string }[];
};

// --- Backlinks生成ロジック ---
const blogContentsPath = path.join(process.cwd(), 'public', 'blog-contents.json');
const blogContents: BlogPost[] = JSON.parse(fs.readFileSync(blogContentsPath, 'utf-8'));
const currentSlug = Astro.url.pathname.replace(/^\/blog\//, '').replace(/\/$/, '');
const candidates = [
  `../blog/${currentSlug}`,
  `./${currentSlug}`,
  `/blog/${currentSlug}`,
  `${currentSlug}`,
];
const backlinks = blogContents
  .filter((post: BlogPost) => {
    if (!post.content || !post.slug) return false;
    // 自分自身へのリンクは除外
    if (post.slug === currentSlug) return false;
    const matches = Array.from(post.content.matchAll(/\[[^\]]+]\(([^)]+)\)/g));
    return matches.some((m: RegExpMatchArray) => {
      const linkPath = m[1].replace(/\.(md|mdx)$/, '').replace(/\/$/, '');
      return candidates.some(c => linkPath.endsWith(c));
    });
  })
  .map((post: BlogPost) => ({ slug: post.slug, title: post.title }));

// --- External Links生成ロジック ---
const currentPost = blogContents.find(p => p.slug === currentSlug);
const externalLinks = currentPost
  ? Array.from(currentPost.content.matchAll(/\[([^\]]+)\]\((https?:\/\/[^)]+)\)/g))
    .map(match => ({ title: match[1], url: match[2] }))
  : [];

// --- OGP/URL関連 (変更なし) ---
const canonicalURL = Astro.url;
const siteName = 'Mekann';
const imagePath = ogImage || '/default-og-image.png';
const absoluteImageUrl = new URL(imagePath, Astro.url.origin).href;

// --- 日付処理 (変更なし) ---
let sourceDate: string | Date | undefined = date ?? pubDate;
let parsedDate: Date | null = null;
let isoDate = '';
if (typeof sourceDate === 'string') {
  try {
    parsedDate = new Date(sourceDate);
    if (isNaN(parsedDate.valueOf())) {
      parsedDate = null;
    } else {
      isoDate = parsedDate.toISOString();
    }
  } catch (e) {
    parsedDate = null;
  }
} else if (sourceDate instanceof Date) {
  if (!isNaN(sourceDate.valueOf())) {
    parsedDate = sourceDate;
    isoDate = parsedDate.toISOString();
  } else {
    parsedDate = null;
  }
}
const validDate = parsedDate instanceof Date;
const displayDate = validDate
  ? parsedDate!.toLocaleDateString('ja-JP', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
    })
  : '';

// 画像最適化を事前に行い、遅延読み込みを追加
const optimizedBg = await getImage({ 
  src: outputGray, 
  format: 'avif', 
  quality: 10,
  widths: [400, 800, 1200],
  fetchpriority: "high",
  loading: "eager",
  sizes: "(max-width: 700px) 100vw, 620px"
});

// optimizedImg（画像パス）がpropsで渡された場合はWebP最適化
if (rawProps.optimizedImg) {
  const imgMod = await import(/* @vite-ignore */ rawProps.optimizedImg);
  const optimized = await getImage({ 
    src: imgMod.default ?? imgMod, 
    format: 'avif', 
    quality: 60,
    widths: [620, 1024, 1920],
    fetchpriority: "high",
    loading: "eager",
    sizes: "(max-width: 700px) 100vw, 620px"
  });
  rawProps.optimizedImg = optimized.src;
}
---

<html lang="ja" class="bg-black">
  <head>
    {/* Head内は変更なし */}
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <base href="/" />
    {description && <meta name="description" content={description} />}
    <meta property="og:title" content={title} />
    {description && <meta property="og:description" content={description} />}
    <meta property="og:url" content={canonicalURL.href} />
    <meta property="og:site_name" content={siteName} />
    <meta property="og:image" content={absoluteImageUrl} />
    <meta property="og:type" content="article" />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@Mekann2904" />
    <meta name="twitter:creator" content="@Mekann2904" />
    <meta name="twitter:title" content={title} />
    {description && <meta name="twitter:description" content={description} />}
    <meta name="twitter:image" content={absoluteImageUrl} />
    <link rel="preload" as="image" href={optimizedBg.src} />
    <link rel="preload" as="fetch" href="/blog-graph.json" crossorigin>
    <link rel="prefetch" href="/blog-contents.json">
    <GoogleFontsOptimizer url="https://fonts.googleapis.com/css2?family=Inter:wght@200;400;500;700&display=swap" />
    <link rel="preconnect" href="https://cdn.jsdelivr.net" crossorigin>
    <link rel="preconnect" href="https://fonts.googleapis.com" crossorigin>
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link rel="preconnect" href="https://static.cloudflareinsights.com" crossorigin>
    <link rel="dns-prefetch" href="https://static.cloudflareinsights.com">
    
    {/* パフォーマンス最適化のためのCSS */}
    <style>
      .gpu-accelerated {
        transform: translateZ(0);
        will-change: transform;
      }
      .layout-optimized {
        contain: layout style paint;
      }
      .sticky-optimized {
        position: sticky;
        top: 1rem;
        transform: translateZ(0);
        will-change: transform;
        contain: layout style paint;
      }
      .grid-optimized {
        display: grid;
        grid-template-columns: minmax(0, 1fr);
        gap: 2rem;
      }
      @media (min-width: 1024px) {
        .grid-optimized {
          grid-template-columns: 1fr 2fr 1fr;
          gap: 2rem;
        }
      }
    </style>
  </head>

  <body class="bg-black text-white text-base bg-faint-image layout-optimized"
    style={`--faint-bg: url('${optimizedBg.src}');`}
  >
    {/* --- Header (変更なし) --- */}
    <header class="fixed inset-x-0 top-0 z-50 bg-black border-b border-white/10 w-full gpu-accelerated">
      <nav class="flex items-center justify-between px-4 sm:px-8 py-5">
        <a href="/" class="text-white font-semibold text-lg">Mekann</a>
        
        {/* Desktop Nav */}
        <ul class="hidden lg:flex gap-8 text-sm">
          <li><a href="/" class="text-gray-500 hover:text-white transition">Home</a></li>
          <li class="relative group">
            <button class="text-gray-500 hover:text-white transition flex items-center gap-1">
              Art
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            <ul class="absolute right-0 mt-2 min-w-[12rem] max-w-[90vw] bg-black border border-white/10 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 overflow-x-auto">
              <li><a href="/test/three" class="block px-4 py-2 text-sm text-gray-500 hover:text-white hover:bg-white/5">Knowledge Network 3D</a></li>
              <li><a href="/test/three-1" class="block px-4 py-2 text-sm text-gray-500 hover:text-white hover:bg-white/5">Water Animation</a></li>
              <li><a href="/test/three-2" class="block px-4 py-2 text-sm text-gray-500 hover:text-white hover:bg-white/5">Three.js Light Examples</a></li>
              <li><a href="/test/three-3" class="block px-4 py-2 text-sm text-gray-500 hover:text-white hover:bg-white/5">Three.js 3D Model Demo</a></li>
              <li><a href="/test/three-4" class="block px-4 py-2 text-sm text-gray-500 hover:text-white hover:bg-white/5">Three.js Projector Demo</a></li>
            </ul>
          </li>
          <li><a href="/blog" class="text-gray-500 hover:text-white transition">Blog</a></li>
        </ul>

        {/* Mobile Nav (Hamburger) */}
        <div class="lg:hidden">
          <button class="text-white">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
            </svg>
          </button>
        </div>
      </nav>
    </header>

    {/* --- Main Content (最適化されたレイアウト) --- */}
    <main class="w-full px-4 sm:px-6 lg:px-8 pt-28 pb-12">
      <div class="grid-optimized">
        
        {headings && headings.length > 1 && (
          <aside class="hidden lg:block min-w-0">
            <div class="sticky-optimized">
              <a href="/blog/" class="inline-flex items-center text-gray-500 hover:text-white mb-6 lg:mb-8 no-underline text-base">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                </svg>
                Back to Blog
              </a>
              <h2 class="text-sm font-bold tracking-wider uppercase text-gray-500 mb-4">On this page</h2>
              <div class="min-h-[12rem]">
                <DynamicToc headings={headings} pathname={Astro.url.pathname} client:visible />
              </div>
            </div>
          </aside>
        )}

        <div class="px-0 min-w-0">
          <article
            class="prose prose-sm prose-invert mx-auto max-w-4xl
                   leading-snug font-jp-sans
                   bg-black/0
                   prose-pre:bg-slate-800 prose-pre:text-gray-100 prose-pre:p-4 
                   prose-pre:rounded-lg prose-pre:overflow-auto prose-pre:my-6
                   prose-code:bg-transparent prose-code:text-inherit
                   prose-img:max-w-full prose-img:h-auto prose-img:rounded-lg
                   prose-img:shadow-lg prose-img:my-6"
          >
            {validDate && (
              <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between text-sm text-gray-500 mb-6 lg:mb-8">
                <time datetime={isoDate}>{displayDate}</time>
                {author && <span class="mt-1 sm:mt-0 sm:ml-4">By {author}</span>}
              </div>
            )}

            <h1 class="text-2xl font-bold text-white mb-8 lg:mb-10">{title}</h1>
            
            {/* 本文のコンテンツがここに表示される */}
            <slot />
          </article>
        </div>
        
        {(tags && tags.length > 0 || backlinks && backlinks.length > 0 || externalLinks && externalLinks.length > 0) && (
          <aside class="mt-16 lg:mt-0 min-w-0">
            <div class="sticky-optimized">
              {/* グラフビューセクション */}
              <div class="mb-8">
                <h2 class="text-sm font-bold tracking-wider uppercase text-gray-500 mb-4">Knowledge Graph</h2>
                <div class="bg-gray-800 border border-gray-600 rounded-lg p-3 h-80 overflow-hidden">
                  <BlogGraph client:load />
                </div>
              </div>

              {tags && tags.length > 0 && (
                <>
                  <h2 class="text-sm font-bold tracking-wider uppercase text-gray-500 mb-4">Tags</h2>
                  <div class="flex flex-wrap gap-3 mb-8">
                    {tags.map((tag) => (
                      <a
                        href={`/tags/${tag}`}
                        class="bg-gray-800 text-blue-300 hover:bg-gray-700 hover:text-blue-200 px-3 py-1 rounded-full text-sm no-underline transition-colors"
                      >
                        #{tag}
                      </a>
                    ))}
                  </div>
                </>
              )}
              <div class="min-h-[8rem]">
                <ExtractLinks links={externalLinks} />
              </div>
              <Backlinks backlinks={backlinks} />
            </div>
          </aside>
        )}

      </div>
    </main>

    {/* --- Footer (変更なし) --- */}
    <footer class="bg-black text-gray-400 border-t border-gray-800 py-6 lg:py-8 text-base">
      <div class="container mx-auto text-center text-sm px-6 lg:px-8">
        © {new Date().getFullYear()} {siteName}
      </div>
    </footer>

    </body>
</html>
